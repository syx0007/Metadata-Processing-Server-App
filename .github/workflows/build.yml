name: Build Music Metadata Processor - Windows Only

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual trigger'
  push:
    tags: ['v*']

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          - architecture: x86
            target: x86
            python_version: '3.10'
          - architecture: x64
            target: x64
            python_version: '3.10'

    runs-on: windows-latest
    name: Build Windows ${{ matrix.target }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: ${{ matrix.architecture }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        pip install "pyside6==6.6.1" --timeout=300

    - name: Create icon file if missing
      run: |
        if (-not (Test-Path "icon.ico")) {
          echo "Creating placeholder icon..."
          # 创建一个有效的ICO文件占位符
          $iconContent = [byte[]]@(0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x68, 0x04, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00)
          [System.IO.File]::WriteAllBytes("icon.ico", $iconContent)
        }

    - name: Build Windows executable
      run: |
        $buildName = "MusicMetadataProcessor_windows_${{ matrix.target }}"
        
        # 显示当前目录结构用于调试
        Get-ChildItem .
        
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name $buildName `
          --icon=icon.ico `
          --add-data "icon.ico;." `
          --hidden-import=flask `
          --hidden-import=flask_cors `
          --hidden-import=mutagen `
          --hidden-import=requests `
          --hidden-import=PySide6 `
          --hidden-import=PySide6.QtCore `
          --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtWidgets `
          --clean `
          --noconfirm `
          app_gui.py

        if (Test-Path "dist/$buildName.exe") {
          echo "✅ Windows ${{ matrix.target }} build successful!"
          echo "File size: $( (Get-Item "dist/$buildName.exe").Length ) bytes"
        } else {
          echo "❌ Build failed - checking dist directory:"
          Get-ChildItem "dist" -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.target }}-build
        path: dist/
        if-no-files-found: error

  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List all artifacts
      run: |
        echo "Available artifacts:"
        find artifacts -type f -name "*" | while read file; do
          echo "  - $file"
          ls -la "$file"
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        body: |
          # 🎵 音乐元数据处理器 - Windows 版本

          ## 📦 下载说明

          ### Windows 系统
          - **x86 (32位)**: `MusicMetadataProcessor_windows_x86.exe`
          - **x64 (64位)**: `MusicMetadataProcessor_windows_x64.exe`

          ## 🚀 使用说明
          1. 下载对应的 `.exe` 文件
          2. 双击运行即可

          ## ⚠️ 注意事项
          - 首次运行可能会被Windows Defender拦截，请选择"更多信息"->"仍要运行"
          - 建议下载与您系统架构匹配的版本

          ## 📊 版本信息
          - 版本: ${{ github.ref_name }}
          - 构建时间: ${{ github.event.repository.updated_at }}
          - Python版本: 3.10
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
