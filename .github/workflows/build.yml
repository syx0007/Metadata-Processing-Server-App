name: Build Music Metadata Processor - Multi Platform

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build-windows:
    strategy:
      matrix:
        include:
          - architecture: x86
            target: x86
            python_version: '3.10'
          - architecture: x64
            target: x86_64
            python_version: '3.10'
          - architecture: ARM64
            target: arm64
            python_version: '3.10'

    runs-on: windows-latest
    name: Build Windows ${{ matrix.target }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: ${{ matrix.architecture }}

    - name: Display Python info
      run: |
        python --version
        python -c "import platform; print(f'Architecture: {platform.machine()}')"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        pip install "pyside6==6.6.1" --timeout=180

    - name: Create icon file if missing
      run: |
        if (-not (Test-Path "icon.ico")) {
          echo "Creating placeholder icon..."
          echo "placeholder" > icon.ico
        }

    - name: Build Windows executable
      run: |
        $buildName = "MusicMetadataProcessor_windows_${{ matrix.target }}"
        
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name $buildName `
          --icon=icon.ico `
          --add-data "icon.ico;." `
          --hidden-import=flask `
          --hidden-import=flask_cors `
          --hidden-import=flask_cors.core `
          --hidden-import=mutagen `
          --hidden-import=requests `
          --hidden-import=PySide6 `
          --hidden-import=PySide6.QtWidgets `
          --hidden-import=PySide6.QtCore `
          --hidden-import=PySide6.QtGui `
          --hidden-import=PySide6.QtNetwork `
          --hidden-import=werkzeug.serving `
          --hidden-import=werkzeug.middleware.dispatcher `
          --hidden-import=chardet `
          --hidden-import=charset_normalizer `
          --hidden-import=idna `
          --hidden-import=urllib3 `
          --hidden-import=certifi `
          --clean `
          --noconfirm `
          app_gui.py

        if (Test-Path "dist/$buildName.exe") {
          echo "✅ Windows ${{ matrix.target }} build successful!"
        } else {
          echo "❌ Build failed"
          exit 1
        }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.target }}-build
        path: dist/
        if-no-files-found: error

  build-linux:
    strategy:
      matrix:
        include:
          - architecture: x64
            target: x86_64
            python_version: '3.10'
          - architecture: ARM64
            target: arm64
            python_version: '3.10'

    runs-on: ubuntu-latest
    name: Build Linux ${{ matrix.target }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libxcb-xinerama0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        pip install "pyside6==6.6.1" --timeout=180

    - name: Create icon file if missing
      run: |
        if [ ! -f "icon.ico" ]; then
          echo "Creating placeholder icon..."
          echo "placeholder" > icon.ico
        fi

    - name: Build Linux executable
      run: |
        buildName="MusicMetadataProcessor_linux_${{ matrix.target }}"
        
        python -m PyInstaller \
          --onefile \
          --name $buildName \
          --icon=icon.ico \
          --add-data "icon.ico:." \
          --hidden-import=flask \
          --hidden-import=flask_cors \
          --hidden-import=flask_cors.core \
          --hidden-import=mutagen \
          --hidden-import=requests \
          --hidden-import=PySide6 \
          --hidden-import=PySide6.QtWidgets \
          --hidden-import=PySide6.QtCore \
          --hidden-import=PySide6.QtGui \
          --hidden-import=PySide6.QtNetwork \
          --hidden-import=werkzeug.serving \
          --hidden-import=werkzeug.middleware.dispatcher \
          --hidden-import=chardet \
          --hidden-import=charset_normalizer \
          --hidden-import=idna \
          --hidden-import=urllib3 \
          --hidden-import=certifi \
          --clean \
          --noconfirm \
          app_gui.py

        if [ -f "dist/$buildName" ]; then
          echo "✅ Linux ${{ matrix.target }} build successful!"
          # 添加可执行权限
          chmod +x "dist/$buildName"
        else
          echo "❌ Build failed"
          exit 1
        fi

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.target }}-build
        path: dist/
        if-no-files-found: error

  build-macos:
    strategy:
      matrix:
        include:
          - architecture: x64
            target: x86_64
            python_version: '3.10'
          - architecture: ARM64
            target: arm64
            python_version: '3.10'

    runs-on: macos-latest
    name: Build macOS ${{ matrix.target }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller==6.15.0 flask==3.1.2 mutagen==1.47.0 requests==2.32.5 flask_cors==4.0.0
        pip install "pyside6==6.6.1" --timeout=180

    - name: Create icon file if missing
      run: |
        if [ ! -f "icon.ico" ]; then
          echo "Creating placeholder icon..."
          echo "placeholder" > icon.ico
        fi

    - name: Build macOS executable
      run: |
        buildName="MusicMetadataProcessor_macos_${{ matrix.target }}"
        
        python -m PyInstaller \
          --onefile \
          --windowed \
          --name $buildName \
          --icon=icon.ico \
          --add-data "icon.ico:." \
          --hidden-import=flask \
          --hidden-import=flask_cors \
          --hidden-import=flask_cors.core \
          --hidden-import=mutagen \
          --hidden-import=requests \
          --hidden-import=PySide6 \
          --hidden-import=PySide6.QtWidgets \
          --hidden-import=PySide6.QtCore \
          --hidden-import=PySide6.QtGui \
          --hidden-import=PySide6.QtNetwork \
          --hidden-import=werkzeug.serving \
          --hidden-import=werkzeug.middleware.dispatcher \
          --hidden-import=chardet \
          --hidden-import=charset_normalizer \
          --hidden-import=idna \
          --hidden-import=urllib3 \
          --hidden-import=certifi \
          --clean \
          --noconfirm \
          app_gui.py

        if [ -f "dist/$buildName" ]; then
          echo "✅ macOS ${{ matrix.target }} build successful!"
          # 添加可执行权限
          chmod +x "dist/$buildName"
        else
          echo "❌ Build failed"
          exit 1
        fi

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.target }}-build
        path: dist/
        if-no-files-found: error

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List all artifacts
      run: |
        echo "Available artifacts:"
        find artifacts -type f -name "*" | while read file; do
          echo "  - $file"
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        body: |
          # 🎵 音乐元数据处理器 - 多平台版本

          ## 📦 下载说明

          请根据您的操作系统和架构选择对应的可执行文件：

          ### Windows 系统
          - **x86 (32位)**: `MusicMetadataProcessor_windows_x86.exe`
          - **x64 (64位)**: `MusicMetadataProcessor_windows_x86_64.exe`
          - **ARM64**: `MusicMetadataProcessor_windows_arm64.exe`

          ### Linux 系统
          - **x64 (64位)**: `MusicMetadataProcessor_linux_x86_64`
          - **ARM64**: `MusicMetadataProcessor_linux_arm64`

          ### macOS 系统
          - **Intel芯片**: `MusicMetadataProcessor_macos_x86_64`
          - **Apple Silicon (M1/M2)**: `MusicMetadataProcessor_macos_arm64`

          ## 🚀 使用说明

          1. **Windows**: 下载对应的 `.exe` 文件，双击运行
          2. **Linux**: 下载对应的文件，添加执行权限：`chmod +x 文件名`，然后运行
          3. **macOS**: 下载对应的文件，添加执行权限：`chmod +x 文件名`，然后运行

          ## ⚠️ 注意事项

          - **Windows**: 首次运行可能会被Windows Defender拦截，请选择"更多信息"->"仍要运行"
          - **Linux/macOS**: 可能需要安装相关依赖库
          - 所有文件均已添加数字签名和时间戳

          ## 📊 版本信息
          - 版本: ${{ github.ref_name }}
          - 构建时间: ${{ github.event.repository.updated_at }}
          - Python版本: 3.10

          ## 🔧 技术支持
          如有问题，请提交 Issue 或联系开发团队。

          > 💡 提示：推荐下载与您系统架构匹配的版本以获得最佳性能。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
